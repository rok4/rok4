#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière 
# 
# Géoportail SAV <contact.geoservices@ign.fr>
# 
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
# 
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# 
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: command.pl

Section: tool

Tool allowing to do something.

This tool do that, then this...

(see command_general.png)

=cut

################################################################################

use warnings;
use strict;

use POSIX qw(locale_h);

use Getopt::Long;
use Data::Dumper;

use File::Basename;
use File::Spec;
use File::Path;
use Cwd;

use Log::Log4perl qw(:easy);

# My search module
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5";

# My module
use PACK::ClassName;

################################################################################
# Constantes
use constant TRUE  => 1;
use constant FALSE => 0;

################################################################################
# Pas de bufferisation des sorties.
$|=1;

####################################################################################################
#                                       Group: Variables                                           #
####################################################################################################

# Variable: version
my $VERSION = '@VERSION_TEXT@';

=begin nd
Variable: opts

Contains command's call options :

    version - To obtain the command's version
    help - To obtain the command's help
    usage - To obtain the command's usage
=cut
my %opts =
(
    "version"    => 0,
    "help"       => 0,
    "usage"      => 0,
);

####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################

=begin nd
Function: main

Main method.

See Also:
    <init>, <config>, <doIt>
=cut
sub main {
  printf("Command: version [%s]\n",$VERSION);
  # message
  my $message = undef;

  $message = "BEGIN";
  printf STDOUT "%s\n", $message;
  
  # initialization
  ALWAYS("> Initialization");
  if (! main::init()) {
    $message = "ERROR INITIALIZATION !";
    printf STDERR "%s\n", $message;
    exit 1;
  }
  
  # configuration
  ALWAYS("> Configuration");
  if (! main::config()) {
    $message = "ERROR CONFIGURATION !";
    printf STDERR "%s\n", $message;
    exit 2;
  }
  
  # execution
  ALWAYS("> Execution");
  if (! main::doIt()) {
    $message = "ERROR EXECUTION !";
    printf STDERR "%s\n", $message;
    exit 3;
  }
  
  $message = "END";
  printf STDOUT "%s\n", $message;
}

=begin nd
Function: init

Initialize this and that
=cut
sub init {
  
    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;
    
    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "This template command use a template Perl Class\n" ;
            exit 0;
        },
        "version|v" => sub { exit 0; },
        "usage" => sub {
            printf "This template command use a template Perl Class\n" ;
            exit 0;
        },     
    ) or do {
        printf "Unappropriate usage\n";
        printf "This template command use a template Perl Class\n";
        exit -1;
    };
  
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => $WARN,
        layout => '%5p : %m (%M) %n'
    });
  
    # check Options
    
    return TRUE;
}

=begin nd
Function: config
=cut
sub config {

    return TRUE;
}

=begin nd
Function: doIt
=cut
sub doIt {

    my $classObject = PACK::ClassName->new(4,5);

    return TRUE;
}

################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__

=begin nd
Section: Details

Group: Synopsis

    (start code)
    perl command.pl
    (end code)

Group: Command's options

    --help - 

    --usage - 

    --version - 

Group: Title 1

Topic: Subtitle 1

Topic: Subtitle 2

Group: Title 2

Topic: Subtitle 1

Topic: Subtitle 2

=cut
