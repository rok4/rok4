if(ROK4DEPENDENCIES_FOUND)
  #message(STATUS "Dependencies already found")
  return()
endif(ROK4DEPENDENCIES_FOUND)

set(ROK4DEPENDENCIES_FOUND TRUE BOOL)

###################################################### Extern libraries, shared


if(NOT TARGET boostlog)
  find_package(BoostLog)
  if(BOOSTLOG_FOUND)
    add_library(boostlog SHARED IMPORTED)
    set_property(TARGET boostlog PROPERTY IMPORTED_LOCATION ${BOOSTLOG_LIBRARY})
    add_library(boostlogsetup SHARED IMPORTED)
    set_property(TARGET boostlogsetup PROPERTY IMPORTED_LOCATION ${BOOSTLOGSETUP_LIBRARY})
    add_library(boostthread SHARED IMPORTED)
    set_property(TARGET boostthread PROPERTY IMPORTED_LOCATION ${BOOSTTHREAD_LIBRARY})
    add_library(boostsystem SHARED IMPORTED)
    set_property(TARGET boostsystem PROPERTY IMPORTED_LOCATION ${BOOSTSYSTEM_LIBRARY})
    add_library(boostfilesystem SHARED IMPORTED)
    set_property(TARGET boostfilesystem PROPERTY IMPORTED_LOCATION ${BOOSTFILESYSTEM_LIBRARY})
  else(BOOSTLOG_FOUND)
    message(FATAL_ERROR "Cannot find extern library boostlog")
  endif(BOOSTLOG_FOUND)
endif(NOT TARGET boostlog)

if(NOT TARGET tinyxml)
  find_package(TinyXML)
  if(TINYXML_FOUND)
    add_library(tinyxml SHARED IMPORTED)
    set_property(TARGET tinyxml PROPERTY IMPORTED_LOCATION ${TINYXML_LIBRARY})
  else(TINYXML_FOUND)
    message(FATAL_ERROR "Cannot find extern library tinyxml")
  endif(TINYXML_FOUND)
endif(NOT TARGET tinyxml)

if(NOT TARGET zlib)
  find_package(Zlib)
  if(ZLIB_FOUND)
    add_library(zlib SHARED IMPORTED)
    set_property(TARGET zlib PROPERTY IMPORTED_LOCATION ${ZLIB_LIBRARY})
  else(ZLIB_FOUND)
    message(FATAL_ERROR "Cannot find extern library zlib")
  endif(ZLIB_FOUND)
endif(NOT TARGET zlib)

if(NOT TARGET tiff)
  find_package(TIFF)
  if(TIFF_FOUND)
    add_library(tiff SHARED IMPORTED)
    set_property(TARGET tiff PROPERTY IMPORTED_LOCATION ${TIFF_LIBRARY})
  else(TIFF_FOUND)
    message(FATAL_ERROR "Cannot find extern library libtiff")
  endif(TIFF_FOUND)
endif(NOT TARGET tiff)

if(NOT TARGET png)
  find_package(PNG)
  if(PNG_FOUND)
    add_library(png SHARED IMPORTED)
    set_property(TARGET png PROPERTY IMPORTED_LOCATION ${PNG_LIBRARY})
  else(PNG_FOUND)
    if(BUILD_DEPENDENCIES)
      message(FATAL_ERROR "Cannot find extern library libpng")
    endif(BUILD_DEPENDENCIES)  
  endif(PNG_FOUND)
endif(NOT TARGET png)

if(NOT TARGET curl)
  find_package(CURL)
  if(CURL_FOUND)
    add_library(curl SHARED IMPORTED)
    set_property(TARGET curl PROPERTY IMPORTED_LOCATION ${CURL_LIBRARY})
  else(CURL_FOUND)
    message(FATAL_ERROR "Cannot find extern library libcurl")
  endif(CURL_FOUND)
endif(NOT TARGET curl)

if(NOT TARGET openssl)
  find_package(OpenSSL)
  if(OPENSSL_FOUND)
    add_library(openssl SHARED IMPORTED)
    set_property(TARGET openssl PROPERTY IMPORTED_LOCATION ${OPENSSL_LIBRARY})
    add_library(crypto SHARED IMPORTED)
    set_property(TARGET crypto PROPERTY IMPORTED_LOCATION ${CRYPTO_LIBRARY})
  else(OPENSSL_FOUND)
    message(FATAL_ERROR "Cannot find extern library openssl and crypto")
  endif(OPENSSL_FOUND)
endif(NOT TARGET openssl)

IF(KDU_USE)
  if(NOT TARGET jpeg2000)
    find_package(KAKADU)
    if(KAKADU_FOUND)
      set(JPEG2000_FOUND TRUE)
      add_library(jpeg2000 SHARED IMPORTED)
      set_property(TARGET jpeg2000 PROPERTY IMPORTED_LOCATION ${KAKADU_LIBRARY})
    else(KAKADU_FOUND)
      message(FATAL_ERROR "Cannot find extern library Kakadu")
    endif(KAKADU_FOUND)
  endif(NOT TARGET jpeg2000)
ELSE(KDU_USE)
  if(NOT TARGET jpeg2000)
    find_package(OPENJPEG)
    if(OPENJPEG_FOUND)
      add_library(jpeg2000 SHARED IMPORTED)
      set_property(TARGET jpeg2000 PROPERTY IMPORTED_LOCATION ${OPENJPEG_LIBRARY})
    else(OPENJPEG_FOUND)
      message(FATAL_ERROR "Cannot find extern library libopenjpeg")
    endif(OPENJPEG_FOUND)
  endif(NOT TARGET jpeg2000)
ENDIF(KDU_USE)

if(NOT TARGET turbojpeg)
  find_package(TurboJpeg)
  if(TURBOJPEG_FOUND)
    add_library(turbojpeg SHARED IMPORTED)
    set_property(TARGET turbojpeg PROPERTY IMPORTED_LOCATION ${TURBOJPEG_LIBRARY})
  else(TURBOJPEG_FOUND)
    message(FATAL_ERROR "Cannot find extern library libturbojpeg")
  endif(TURBOJPEG_FOUND)
endif(NOT TARGET turbojpeg)

if(NOT TARGET jpeg)
  find_package(Jpeg)
  if(JPEG_FOUND)
    add_library(jpeg SHARED IMPORTED)
    set_property(TARGET jpeg PROPERTY IMPORTED_LOCATION ${JPEG_LIBRARY})
  else(JPEG_FOUND)
    message(FATAL_ERROR "Cannot find extern library libjpeg")
  endif(JPEG_FOUND)
endif(NOT TARGET jpeg)

if(NOT TARGET fcgi)
  find_package(Fcgi)
  if(FCGI_FOUND)
    add_library(fcgi SHARED IMPORTED)
    set_property(TARGET fcgi PROPERTY IMPORTED_LOCATION ${FCGI_LIBRARY})
  else(FCGI_FOUND)
    message(FATAL_ERROR "Cannot find extern library fcgi")
  endif(FCGI_FOUND)
endif(NOT TARGET fcgi)


IF(BUILD_OBJECT)
  if(NOT TARGET rados)
    find_package(Rados)
    if(RADOS_FOUND)
      add_library(rados SHARED IMPORTED)
      set_property(TARGET rados PROPERTY IMPORTED_LOCATION ${RADOS_LIBRARY})
    else(RADOS_FOUND)
      message(FATAL_ERROR "Cannot find extern library librados")
    endif(RADOS_FOUND)
  endif(NOT TARGET rados)
ENDIF(BUILD_OBJECT)

###################################################### Extern libraries, static

if(NOT TARGET thread)
  find_package(Threads REQUIRED)
  if(NOT CMAKE_USE_PTHREADS_INIT)
    message(FATAL_ERROR "Need the PThread library")
  endif(NOT CMAKE_USE_PTHREADS_INIT)
  add_library(thread STATIC IMPORTED)
  set_property(TARGET thread PROPERTY IMPORTED_LOCATION ${CMAKE_THREAD_LIBS_INIT})
endif(NOT TARGET thread)

###################################################### Intern libraries, static

if(NOT TARGET proj)
find_package(Proj)
if(PROJ_FOUND)
  add_library(proj STATIC IMPORTED)
  set_property(TARGET proj PROPERTY IMPORTED_LOCATION ${PROJ_LIBRARY})
else(PROJ_FOUND)
  if(BUILD_DEPENDENCIES)
    message(STATUS "Building libproj")
    if(NOT TARGET proj)
      add_library(proj STATIC IMPORTED)
    endif(NOT TARGET proj)
    if(PACKAGE_LIB)
      add_subdirectory(${ROK4LIBSDIR}/libproj)
    else(PACKAGE_LIB)
      add_subdirectory(${ROK4LIBSDIR}/libproj EXCLUDE_FROM_ALL)
    endif(PACKAGE_LIB)  
  endif(BUILD_DEPENDENCIES)
endif(PROJ_FOUND)
endif(NOT TARGET proj)

if(UNITTEST)
  if(NOT TARGET cppunit)
  find_package(CppUnit)
    if(CPPUNIT_FOUND)
      add_library(cppunit SHARED IMPORTED)
      set_property(TARGET cppunit PROPERTY IMPORTED_LOCATION ${CPPUNIT_LIBRARY})
    else(CPPUNIT_FOUND)
      if(BUILD_DEPENDENCIES)
        message(STATUS "Building libCppUnit")
        if(NOT TARGET cppunit)
          add_library(cppunit SHARED IMPORTED)
        endif(NOT TARGET cppunit)
        add_subdirectory(${ROK4LIBSDIR}/libcppunit)
      endif(BUILD_DEPENDENCIES)
    endif(CPPUNIT_FOUND)
  endif(NOT TARGET cppunit)
endif(UNITTEST)

if(NOT TARGET lzw)
find_package(LZW)
if(LZW_FOUND)
  add_library(lzw STATIC IMPORTED)
  set_property(TARGET lzw PROPERTY IMPORTED_LOCATION ${LZW_LIBRARY})
else(LZW_FOUND)
  if(BUILD_DEPENDENCIES)
    message(STATUS "Building LZW")
    if(PACKAGE_LIB)
      add_subdirectory(${ROK4LIBSDIR}/liblzw)
    else(PACKAGE_LIB)
      add_subdirectory(${ROK4LIBSDIR}/liblzw EXCLUDE_FROM_ALL)
    endif(PACKAGE_LIB)
  endif(BUILD_DEPENDENCIES)
endif(LZW_FOUND)
endif(NOT TARGET lzw)

if(NOT TARGET pkb)
find_package(PKB)
if(PKB_FOUND)
  add_library(pkb STATIC IMPORTED)
  set_property(TARGET pkb PROPERTY IMPORTED_LOCATION ${PKB_LIBRARY})
else(PKB_FOUND)
  if(BUILD_DEPENDENCIES)
    message(STATUS "Building PKB")
    if(PACKAGE_LIB)
      add_subdirectory(${ROK4LIBSDIR}/libpkb)
    else(PACKAGE_LIB)
      add_subdirectory(${ROK4LIBSDIR}/libpkb EXCLUDE_FROM_ALL)
    endif(PACKAGE_LIB)
  endif(BUILD_DEPENDENCIES)
endif(PKB_FOUND)
endif(NOT TARGET pkb)

if(NOT TARGET image)
  find_package(Image)
  if(IMAGE_FOUND)
    add_library(image STATIC IMPORTED)
    set_property(TARGET image PROPERTY IMPORTED_LOCATION ${IMAGE_LIBRARY})
  else(IMAGE_FOUND)
    if(BUILD_DEPENDENCIES)
      set(IMAGE_FOUND TRUE)
      message(STATUS "Building libImage")
      if(PACKAGE_LIB)
        add_subdirectory(${ROK4LIBSDIR}/libimage)
      else(PACKAGE_LIB)
        add_subdirectory(${ROK4LIBSDIR}/libimage EXCLUDE_FROM_ALL)
      endif(PACKAGE_LIB)
    endif(BUILD_DEPENDENCIES)
  endif(IMAGE_FOUND)
endif(NOT TARGET image)

set(ROK4DEPENDENCIES_FOUND TRUE BOOL)

