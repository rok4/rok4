#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière
#
# Géoportail SAV <contact.geoservices@ign.fr>
#
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
#
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: create-list.pl

Section: CREATE-LIST tool

Synopsis:
    (start code)
    perl create-list.pl --imagedir=dir --list-path=file
    (end code)

Tool allowing to create a list file.

=cut

################################################################################

use warnings;
use strict;

# Module
use Log::Log4perl qw(:easy);
use Getopt::Long;
use File::Find::Rule;
use Cwd qw(realpath cwd);


################################################################################
# Constantes
use constant TRUE  => 1;
use constant FALSE => 0;

################################################################################
# Version
my $VERSION = '@VERSION_TEXT@';

=begin nd
Variable: options

Contains create-list call options :

    version - To obtain the command's version
    help - To obtain the command's help
    usage - To obtain the command's usage
    
    imagedir - To precise the directory containing images
    list-path - To precise the list file to create
=cut
my %options =
(
    "version"    => 0,
    "help"       => 0,
    "usage"      => 0,

    # Mandatory
    "imagedir"  => undef,

    # Optionnal (with default values)
    "list-path" => cwd . "/output.list"

);

####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################

=begin nd
Function: main

Main method.

See Also:
    <init>, <doIt>
=cut
sub main {

    print STDOUT "BEGIN\n";

    # initialization
    if (! main::init()) {
        print STDERR "ERROR INITIALIZATION !\n";
        exit 1;
    }
    
    printf("CREATE-LIST : version [%s]\n",$VERSION);

    # execution
    if (! main::doIt()) {
        print STDERR "ERROR EXECUTION !\n";
        exit 5;
    }

    print STDOUT "END\n";
}

=begin nd
Function: init

Checks and stores options, initializes the default logger.
=cut
sub init {

    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;

    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "See documentation here: https://github.com/rok4/rok4\n" ;
            exit 0;
        },
        "version|v" => sub { exit 0; },
        "usage" => sub {
            printf "See documentation here: https://github.com/rok4/rok4\n" ;
            exit 0;
        },
        
        "imagedir=s" => \$options{imagedir},
        "list-path=s" => \$options{"list-path"}
    ) or do {
        printf "Unappropriate usage\n";
        printf "See documentation here: https://github.com/rok4/rok4\n";
        exit -1;
    };
    
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => $WARN,
        layout => '%5p : %m (%M) %n'
    });

    ############# imagedir
    if (! defined $options{imagedir} || $options{imagedir} eq "") {
        ERROR("Option 'imagedir' not defined !");
        return FALSE;
    }

    if (! -d $options{imagedir}) {
        ERROR(sprintf "The imagedir %s does not exist", $options{imagedir});
        return FALSE;
    }

    return TRUE;
}

####################################################################################################
#                                 Group: Process methods                                           #
####################################################################################################

=begin nd
Function: doIt

We list all the files .tif in IMAGEDIR. Then we create a list file.

=cut
sub doIt {

    my @types = ("IMAGE", "MASK");
    my $count = 0;
    my ($imagedirectory) = realpath(File::Find::Rule
        ->directory()
        ->name("IMAGE")
        ->in($options{imagedir})) =~ /(.*)IMAGE.*/;
    my $listfile = $options{"list-path"};
    my $tmplistfile = $listfile . ".tmp";


    if  (! defined $imagedirectory || $imagedirectory eq "") {
        ERROR("Impossible de trouver un répertoire IMAGE dans le paramètre 'imagedir'");
        return FALSE;
    }
    if (! open (FILE, ">", $tmplistfile) ) {
        ERROR(sprintf "Erreur de creation du fichier list (%s) : %s!", $listfile, $!);
        return FALSE;
    }


    my %hash = ($imagedirectory => $count++);
    my @files = map { realpath($_) } File::Find::Rule
        ->file()
        ->name("*.tif")
        ->in($imagedirectory);
    

    # Création du fichier .list temporaire contenant toutes les dalles
    for my $file (@files) {
        foreach my $type (@types) {
            if ($file =~ m/$type/) {
                my ($rootdir) = $file =~ /(.*)$type.*/;
                if (! exists($hash{$rootdir})) {
                    $hash{$rootdir} = $count++;
                }
                my ($image) = $file =~ /.*($type.*)/;
                printf FILE "%s/%s\n", $hash{$rootdir}, $image;
                last;    
            }
        }
    }
    close FILE;


    # Création du .list final par lecture du hash + concaténation du fichier temporaire
    if (! open (FILE2, ">", $listfile) ) {
        ERROR(sprintf "Erreur de creation du fichier list (%s) : %s!", $listfile, $!);
        return FALSE;
    }
    foreach my $k (keys(%hash)) {
        printf FILE2 "%s=%s\n", $hash{$k}, $k;
    }
    printf FILE2 "#\n";


    if (! open (FILE3, "<", $tmplistfile) ) {
        ERROR(sprintf "Erreur de lecture du fichier temporaire de list (%s) : %s!", $tmplistfile, $!);
        return FALSE;
    }
    while (<FILE3>) {
        printf FILE2 $_;
    }

    close FILE2;
    close FILE3;
    unlink $tmplistfile;

    ALWAYS(sprintf "%s créé", $listfile);

}

################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__
