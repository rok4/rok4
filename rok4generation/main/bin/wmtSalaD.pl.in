#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière
#
# Géoportail SAV <contact.geoservices@ign.fr>
#
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
#
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: wmtSalaD.pl

Section: WMTSALAD tool

Synopsis:
(start code)
perl wmtSalaD.pl --conf=path --dsrc=path
(end code)

Tool creating a pyramid descriptor specific to Rok4's 'WMTS on demand' service.
It also initiate the directories tree.

2 types of generation :
    - only create the descriptor file (on demand pyramid without cache)
    - creates the descriptor and the directories trees for cached slabs.

2 data source type :
    - existing Rok4 pyramids (normal ones, with its cache)
    - WMS services
There may be as many sources as needed, whatever their type. Different pyramid levels may have a different setting for sources.

=cut

################################################################################

use warnings;
use strict;

use POSIX qw(locale_h);

use Getopt::Long;

use Data::Dumper;
use Math::BigFloat;
use File::Spec;
use File::Path;
use Cwd;

use Log::Log4perl qw(:easy);
use XML::LibXML;

# My search module
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5";

# My module
use COMMON::Config;
use COMMON::CheckUtils;
use COMMON::PyramidRasterOD;

use WMTSALAD::PyrSource;
use WMTSALAD::WmsSource;

################################################################################
# Constants
use constant TRUE  => 1;
use constant FALSE => 0;

################################################################################
# No output buffering.
$|=1;

####################################################################################################
#                                       Group: Variables                                           #
####################################################################################################

# Variable: version
my $VERSION = '@VERSION_TEXT@';

=begin nd
Variable: options

Contains be4 call options :

    version - To obtain the command's version
    help - To obtain the command's help
    usage - To obtain the command's usage
    properties - Configuration file
    environment - Environment file
=cut
my %options =
(
    "version"    => 0,
    "help"       => 0,
    "usage"      => 0,
    
    # Configuration
    "properties"  => undef, # main properties file (mandatory)
    "datasources" => undef # datasources properties file (mandatory)
);


####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################


=begin nd
Function: main

Main method.

See Also:
    <init>, <config>, <doIt>
=cut
sub main {
    printf("WMTSALAD: version [%s]\n",$VERSION);
    # message
    my $message = undef;

    # initialization
    ALWAYS("> Initialization");
    if (! main::init()) {
        $message = "ERROR INITIALIZATION !";
        printf STDERR "%s\n", $message;
        exit 1;
    }

    $message = "BEGIN";
    printf STDOUT "%s\n", $message;

    # configuration
    ALWAYS("> Configuration");
    if (! main::config()) {
        $message = "ERROR CONFIGURATION !";
        printf STDERR "%s\n", $message;
        exit 2;
    }

    # execution
    ALWAYS("> Execution");
    if (! main::doIt()) {
        $message = "ERROR EXECUTION !";
        printf STDERR "%s\n", $message;
        exit 3;
    }

    $message = "END";
    printf STDOUT "%s\n", $message;
}

=begin nd
Function: init

Checks options and initializes the default logger. Check properties file (mandatory).
=cut
sub init {
  
    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;
    
    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "See documentation here: https://github.com/rok4/rok4\n" ;
            exit 0;
        },
        "version|v" => sub { exit 0; },
        "usage" => sub {
            printf "See documentation here: https://github.com/rok4/rok4\n" ;
            exit 0;
        },
        
        "properties|conf=s" => \$options{properties},
        "datasources|dsrc=s" => \$options{datasources}
    ) or do {
        printf "Unappropriate usage\n";
        printf "See documentation here: https://github.com/rok4/rok4\n";
        exit -1;
    };
  
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => $WARN,
        layout => '%5p : %m (%M) %n'
    });

    # We make path absolute

    # properties : mandatory !
    if (! defined $options{properties} || $options{properties} eq "") {
        ERROR("Option 'properties' not defined !");
        return FALSE;
    }
    $options{properties} = File::Spec->rel2abs($options{properties});
    if (! -e $options{properties}) {
        ERROR ("Main properties file does not exists !");
        return FALSE;
    }

    # datasources : mandatory !
    if (! defined $options{datasources} || $options{datasources} eq "") {
        ERROR("Option 'datasources' not defined !");
        return FALSE;
    }
    $options{datasources} = File::Spec->rel2abs($options{datasources});
    if (! -e $options{datasources}) {
        ERROR ("Datasources properties file does not exists !");
        return FALSE;
    }
    
    return TRUE;
}

=begin nd
Function: config
=cut
sub config {

    ###################

    $options{properties} = COMMON::Config->new($options{properties}, "CUSTOM");

    if (! defined $options{properties}) {
        ERROR ("Can not load properties !");
        return FALSE;
    }

    INFO(Dumper($options{properties}));

    my %properties = $options{properties}->getConfigurationCopy();

    # logger
    my $logger = $properties{logger};
    if (defined $logger) {
    
        my @args;
        
        my $layout= '%5p : %m (%M) %n';

        my $level = $logger->{log_level};
        $level = "WARN" if (! defined $level);

        my $out;
        my $logfile = $logger->{log_file};
        if (defined $logfile) {
            if (exists $logger->{log_path} && defined $logger->{log_path}) {
                $logfile = File::Spec->catfile($logger->{log_path}, $logfile);
            }
            $out = ">>$logfile";
        } else {
            $out = "STDOUT";
        }
        
        # add the param logger by default (user settings !)
        push @args, {
            file   => $out,
            level  => $level,
            layout => $layout,
        };
        
        if ($out ne "STDOUT") {
            # add the param logger to the STDOUT
            push @args, {
                file   => "STDOUT",
                level  => $level,
                layout => $layout,
            },
        }

        Log::Log4perl->easy_init(@args);
    }

    # pyramid
    if (! exists $properties{pyramid}) {
        ERROR("No pyramid section in the main configuration file");
        return FALSE;
    }

    ###################

    $options{datasources} = COMMON::Config->new($options{datasources}, "CUSTOM");

    if (! defined $options{datasources}) {
        ERROR ("Can not load datasources !");
        return FALSE;
    }
    
    return TRUE;
}


=begin nd
Function: doIt
=cut
sub doIt {

    my %properties = $options{properties}->getConfigurationCopy();


    my $objPyramid = COMMON::PyramidRasterOD->new("VALUES", $properties{pyramid});
    if (! defined $objPyramid) {
        ERROR ("Can not create a pyramid from section 'pyramid'");
        return FALSE;
    }
    
    if (! $objPyramid->bindTileMatrixSet($properties{pyramid}->{tms_path})) {
        ERROR("Cannot bind TMS to output Pyramid !");
        return FALSE;
    }

    my $tms = $objPyramid->getTileMatrixSet();
    
    #######################
    
    ALWAYS(">>> Load Data Source ...");

    my %datasources = $options{datasources}->getConfigurationCopy();

    foreach my $section (keys(%datasources)) {

        if (! exists $datasources{$section}->{"lv_bottom"} || ! exists $datasources{$section}->{"lv_top"}) {
            ERROR(sprintf "Levels range ('lv_bottom', 'lv_top') properties missing in section '%s'", $section);
            return FALSE;
        }

        my $bottomId = $datasources{$section}->{"lv_bottom"};
        my $topId = $datasources{$section}->{"lv_top"};

        if (! defined $tms->getTileMatrix($bottomId)) {
            ERROR(
                sprintf "No tile matrix with id '%s' exists in tile matrix set '%s'. (section '%s', field 'lv_bottom')", 
                $bottomId, $tms->getName(), $section
            );
            return FALSE;
        }

        if (! defined $tms->getTileMatrix($topId)) {
            ERROR(
                sprintf "No tile matrix with id '%s' exists in tile matrix set '%s'. (section '%s', field 'lv_top')", 
                $topId, $tms->getName(), $section
            );
            return FALSE;
        }

        my $bottomOrder = $tms->getOrderfromID($bottomId);
        my $topOrder = $tms->getOrderfromID($topId);

        if ($bottomOrder > $topOrder) {
            ERROR(sprintf "In section '%s', using TMS '%s', 'lv_bottom' ID '%s' corresponds to a higher level than 'lv_top' ID '%s'.", $section, $tms->getName(), $bottomId, $topId);
            return FALSE;
        }

        if (! exists $datasources{$section}->{"extent"}) {
            ERROR("Undefined extent in section '$section'");
            return FALSE;
        }

        if (! COMMON::CheckUtils::isBbox($datasources{$section}->{"extent"})) {
            ERROR("Extent in section '$section' is not a valid bbox");
            return FALSE;
        }

        # Load sources
        my $sourceIndex = 1;
        my @sources;
        while($options{datasources}->whatIs($section, $sourceIndex) eq "HASH") {
            my $source = $datasources{$section}->{$sourceIndex};
            my $s = undef;
            if (exists $source->{file}) {
                $s = WMTSALAD::PyrSource->new("VALUES", $source);
                if (! defined $s) {
                    ERROR("Cannot load the pyramid source $sourceIndex in section $section");
                    return FALSE
                }
            }
            elsif (exists $source->{wms_url}) {
                $s = WMTSALAD::WmsSource->new("VALUES", $source);
                if (! defined $s) {
                    ERROR("Cannot load the wms source $sourceIndex in section $section");
                    return FALSE
                }
            }
            else {
                ERROR("Cannot determine source type of source $sourceIndex in section $section ");
                return FALSE;
            }
            push(@sources, $s);
            $sourceIndex++;
        }

        if (scalar @sources == 0) {
            ERROR("Error in section '$section' : An on-demand pyramid cannot have a defined level without any data source.");
            return FALSE;
        }

        # On va maintenant ajouter les niveaux à la pyramide pour cette section, entre le bottom et le top

        for (my $order = $bottomOrder; $order <= $topOrder; $order++) {

            my $ID = $tms->getIDfromOrder($order);
            if (! defined $ID) {
                ERROR(sprintf "Cannot identify TMS level ID for the order %s !", $order);
                return FALSE;
            }

            if (! $objPyramid->addLevel($ID, $datasources{$section}->{"extent"}, \@sources) ) {
                ERROR("Cannot add level $ID");
                return FALSE;            
            }
        }
    }

    
    #######################
    
    ALWAYS(">>> Write descriptor ...");

    if (! $objPyramid->writeDescriptor()) {
        ERROR("Cannot write pyramid's descriptor");
        return FALSE;
    }
    
    
    return TRUE;
}

################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__
