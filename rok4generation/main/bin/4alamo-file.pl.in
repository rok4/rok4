#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière 
# 
# Géoportail SAV <contact.geoservices@ign.fr>
# 
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
# 
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# 
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: 4alamo-file.pl
=cut

################################################################################

use warnings;
use strict;

use POSIX qw(locale_h);

use Getopt::Long;

use Data::Dumper;
local $Data::Dumper::Maxdepth = 2;

use File::Basename;
use File::Spec;
use File::Path;
use Cwd;

use Log::Log4perl qw(:easy);

# My search module
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5";

# My module
use FOURALAMO::PropertiesLoader;
use COMMON::PyramidVector;
use COMMON::DataSourceLoader;
use COMMON::Forest;
use COMMON::Array;
use COMMON::CheckUtils;

################################################################################
# Constantes
use constant TRUE  => 1;
use constant FALSE => 0;

my @UPDATESMODES = ( "slink", "hlink", "copy", "inject" );

################################################################################
# Pas de bufferisation des sorties.
$|=1;

####################################################################################################
#                                       Group: Variables                                           #
####################################################################################################

# Variable: version
my $VERSION = '@VERSION_TEXT@';

=begin nd
Variable: options

Contains 4alamo call options :

    version - To obtain the command's version
    help - To obtain the command's help
    usage - To obtain the command's usage
    properties - Configuration file
    environment - Environment file
=cut
my %options =
(
    "version"    => 0,
    "help"       => 0,
    "usage"      => 0,
    
    # Configuration
    "properties"  => undef, # file properties params (mandatory) !
    "environment" => undef  # file environment 4alamo params (optional) !
);

=begin nd
Variable: this

All parameters by section :

    logger - Can be null
    datasource - 
    pyramid -
    process - 
=cut
my %this =
(
    params => {
        logger        => undef,
        datasource    => undef,
        pyramid       => undef,
        process       => undef
    }
);

####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################

=begin nd
Function: main

Main method.

See Also:
    <init>, <config>, <doIt>
=cut
sub main {
    printf("4ALAMO-FILE: version [%s]\n",$VERSION);
    # message
    my $message = undef;

    # initialization
    ALWAYS("> Initialization");
    if (! main::init()) {
        $message = "ERROR INITIALIZATION !";
        printf STDERR "%s\n", $message;
        exit 1;
    }

    $message = "BEGIN";
    printf STDOUT "%s\n", $message;

    # configuration
    ALWAYS("> Configuration");
    if (! main::config()) {
        $message = "ERROR CONFIGURATION !";
        printf STDERR "%s\n", $message;
        exit 2;
    }

    # execution
    ALWAYS("> Execution");
    if (! main::doIt()) {
        $message = "ERROR EXECUTION !";
        printf STDERR "%s\n", $message;
        exit 3;
    }

    $message = "END";
    printf STDOUT "%s\n", $message;
}

=begin nd
Function: init

Checks options and initializes the default logger. Check environment file (optionnal) and properties file (mandatory).
=cut
sub init {
  
    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;
    
    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "See documentation here: https://github.com/rok4/rok4\n" ;
            exit 0;
        },
        "version|v" => sub { exit 0; },
        "usage" => sub {
            printf "See documentation here: https://github.com/rok4/rok4\n" ;
            exit 0;
        },
        
        "properties|conf=s" => \$options{properties},
        "environment|env=s" => \$options{environment}
    ) or do {
        printf "Unappropriate usage\n";
        printf "See documentation here: https://github.com/rok4/rok4\n";
        exit -1;
    };
  
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => $WARN,
        layout => '%5p : %m (%M) %n'
    });

    # We make path absolute

    # properties : mandatory !
    if (! defined $options{properties} || $options{properties} eq "") {
        ERROR("Option 'properties' not defined !");
        return FALSE;
    }
    my $fproperties = File::Spec->rel2abs($options{properties});
    $options{properties} = $fproperties;
    
    # env : optional !
    if (defined $options{environment} && $options{environment} ne "") {
        my $fenvironment = File::Spec->rel2abs($options{environment});
        $options{environment} = $fenvironment;
    }
    
    return TRUE;
}

=begin nd
Function: config

Loads environment and properties files and merge parameters. Those in the properties file have priority over those in the environment file.

See Also:
    <checkParams>
=cut
sub config {

    ###################
    ALWAYS(">>> Load Properties ...");
    
    my $fprop = $options{properties};
    my $objProp = FOURALAMO::PropertiesLoader->new($fprop);
    
    if (! defined $objProp) {
        ERROR("Can not load specific properties !");
        return FALSE;
    }
    
    my %props = $objProp->getAllProperties();
    
    if (! scalar keys %props) {
        ERROR("All parameters properties are empty !");
        return FALSE;
    }

    ###################

    my $hashref;

    ###################
    ALWAYS(">>> Treat optionnal environment ...");

    my $fenv = undef;
    $fenv = $options{environment} if (defined $options{environment} && $options{environment} ne "");

    if (defined $fenv) {
        my $objEnv = COMMON::Config->new($fenv);

        if (! defined $objEnv) {
            ERROR("Can not load environment properties !");
            return FALSE;
        }

        my %envs = $objEnv->getConfigurationCopy();

        if (! scalar keys %envs) {
            ERROR("All parameters environment are empty !");
            return FALSE;
        }
        
        foreach (keys %{$this{params}}) {
            my $href = { map %$_, grep ref $_ eq 'HASH', ($envs{$_}, $props{$_}) };
            $hashref->{$_} = $href;
        }
    } else {
        foreach (keys %{$this{params}}) {
            my $href = { map %$_, grep ref $_ eq 'HASH', ($props{$_}) };
            $hashref->{$_} = $href;
        }
    }

    ###################

    if (! defined $hashref) {
        ERROR("Can not merge all parameters of properties !");
        return FALSE;
    }
  
    # save params properties
    $this{params} = $hashref;
    
    ###################
    # check parameters
    
    my $pyramid     = $this{params}->{pyramid};       # 
    my $logger      = $this{params}->{logger};        # 
    my $datasource  = $this{params}->{datasource};    #
    my $process     = $this{params}->{process};       # 
    
    # pyramid
    if (! defined $pyramid) {
        ERROR("Parameters Pyramid can not be null !");
        return FALSE;
    }
    
    # datasource
    if (! defined $datasource) {
        ERROR("Parameters Datasource can not be null !");
        return FALSE;
    }
    
    # process
    if (! defined $process) {
        ERROR("Parameters Process can not be null !");
        return FALSE;
    }
    
    # logger
    if (defined $logger) {
    
        my @args;
        
        my $layout= '%5p : %m (%M) %n';
        my $level = $logger->{log_level};
        my $out   = sprintf (">>%s", File::Spec->catfile($logger->{log_path}, $logger->{log_file}))
            if (! COMMON::CheckUtils::isEmpty($logger->{log_path}) && ! COMMON::CheckUtils::isEmpty($logger->{log_file}));
        
        $out   = "STDOUT" if (! defined $out);
        $level = "WARN"   if (! defined $level);
        
        if ($level =~ /(ALL|DEBUG)/) {
            $layout = '%5p : %m (%M) %n';
        }
        
        # add the param logger by default (user settings !)
        push @args, {
            file   => $out,
            level  => $level,
            layout => $layout,
        };
        
        if ($out ne "STDOUT") {
            # add the param logger to the STDOUT
            push @args, {
                file   => "STDOUT",
                level  => $level,
                layout => $layout,
            },
        }
        Log::Log4perl->easy_init(@args);
    }
    
    return TRUE;
}

=begin nd
Function: writeListAndReferences
=cut
sub writeListAndReferences {
    my $forest = shift;
    my $newpyr = shift;
    my $ancestor = shift;

    my $updateMode = $this{params}->{pyramid}->{update_mode};

    if ($newpyr->{type} eq "READ") {
        ERROR("Cannot write list of 'read' pyramid");
        return FALSE;        
    }

    if (defined $ancestor && ref ($ancestor) ne "COMMON::PyramidVector" ) {
        ERROR(sprintf "Ancestor, if provided, have to be a COMMON::PyramidVector ! ");
        return FALSE;
    }

    my $newListPath = $newpyr->getListFile();
    my $newListPathTmp = "$newListPath.tmp";

    my $dir = File::Basename::dirname($newListPath);
    if (! -d $dir) {
        eval { mkpath([$dir]); };
        if ($@) {
            ERROR(sprintf "Can not create the pyramid list directory '%s' : %s !", $dir , $@);
            return FALSE;
        }
    }
    
    # La racine de la pyramide est un dossier dans le cas fichier
    my $newRoot = $newpyr->getDataDir();
    
    if (! defined $ancestor) {
        # Pas d'ancêtre, on doit juste écrire l'en tête : le dossier propre à cette pyramide ou le nom du conteneur objet

        my $NEWLIST;

        if (! open $NEWLIST, ">", $newListPath) {
            ERROR(sprintf "Cannot open new pyramid list file (write) : %s",$newListPath);
            return FALSE;
        }

        print $NEWLIST "0=$newRoot\n";
        print $NEWLIST "#\n";
        close $NEWLIST;

        return TRUE
    }

    ############################## RÉFÉRENCEMENT DES FICHIERS DE L'ANCÊTRE #######################################

    # On a un ancêtre, il va falloir en référencer toutes les dalles

    if (! defined $forest || ref ($forest) ne "COMMON::Forest" ) {
        ERROR(sprintf "We need a COMMON::Forest to write pyramid list ! ");
        return FALSE;
    }

    # On va lire la liste de l'ancêtre
    my $ancestorListPath = $ancestor->getListFile();
    my $OLDLIST;
    
    if (! open $OLDLIST, "<", $ancestorListPath) {
        ERROR("Cannot open old pyramid list file (read) : $ancestorListPath");
        return FALSE;
    }
    
    my %ancestorRoots;
    my %ancestorRootsUse;
    while( my $line = <$OLDLIST> ) {
        chomp $line;
        if ($line eq "#") {
            # separator between caches' roots and images
            last;
        }
        
        $line =~ s/\s+//g; # we remove all spaces
        my @Root = split(/=/,$line,-1);
        
        if (scalar @Root != 2) {
            ERROR(sprintf "Wrong formatted pyramid list (root definition) : %s",$line);
            return FALSE;
        }
        
        $ancestorRoots{$Root[0]} = $Root[1];
        $ancestorRootsUse{$Root[0]} = 0;
    }

    my $NEWLIST;

    if ($updateMode eq "inject") {
        # En mode injection, il ne faut pas écrire directement le fichier de la nouvelle pyramide, car c'est celui de l'ancêtre
        if (! open $NEWLIST, ">", $newListPathTmp) {
            ERROR("Cannot open temporary (inject mode) new pyramid list file (write) : $newListPathTmp");
            return FALSE;
        }
    } else {
        # Sinon, on peut directement écrire dans le fichier liste final de la nouvelle pyramide
        if (! open $NEWLIST, ">", $newListPath) {
            ERROR("Cannot open new pyramid list file (write) : $newListPath");
            return FALSE;
        }
    }
    
    while( my $line = <$OLDLIST> ) {
        chomp $line;
        
        # Une ligne du fichier c'est
        # Cas fichier : 0/IMAGE/15/AB/CD/EF.tif
        my @parts = split("/", $line);
        # La première partie est donc toujours l'index de la racine, qui est soit un dossier
        my $rootIndex = shift(@parts);

        # Dans le cas d'un stockage fichier, le premier élément du chemin est maintenant le type de donnée
        my $dataType = shift(@parts);
        # et le suivant est le niveau
        my $level = shift(@parts);


        if (! defined $newpyr->getLevel($level)) {
            # La dalle appartient à un niveau qui n'est pas voulu dans la nouvelle pyramide
            next;
        }
        
        my ($col,$row) = $newpyr->getLevel($level)->getFromSlabPath($line);

        if (! exists $ancestorRoots{$rootIndex}) {
            ERROR(sprintf "Old pyramid list ($ancestorListPath) uses an undefined root ID : %s", $rootIndex);
            return FALSE;
        }

        my $rootValue = $ancestorRoots{$rootIndex};
        my $ancestorSlab = $line;
        $ancestorSlab =~ s/^[0-9]+/$rootValue/;
        my $newSlab = $line;
        $newSlab =~ s/^[0-9]+/$newRoot/;
        # Dans le cas fichier, seule la racine est à remplacer par celle de la nouvelle pyramide : donc c'est bon, $newSlab est correct

        if ($updateMode eq "slink") {
            if (! defined COMMON::ProxyStorage::symLink("FILE", $ancestorSlab, "FILE", $newSlab)) {
                ERROR("The ancestor slab '$ancestorSlab' cannot be referenced by sym link in the new pyramid");
                return FALSE;
            }
        }
        elsif ($updateMode eq "hlink") {
            if (! COMMON::ProxyStorage::hardLink("FILE", $ancestorSlab, "FILE", $newSlab)) {
                ERROR("The ancestor slab '$ancestorSlab' cannot be referenced by hard link in the new pyramid");
                return FALSE;
            }
        }
        elsif ($updateMode eq "copy") {
            if (! COMMON::ProxyStorage::copy("FILE", $ancestorSlab, "FILE", $newSlab)) {
                ERROR("The ancestor slab '$ancestorSlab' cannot be referenced by copy in the new pyramid");
                return FALSE;
            }
        }
        
        if (! $forest->containsNode($level,$col,$row)) {
            # This image is not in the forest, it won't be modified by this generation.
            # We add it now to the list (real file path)
            my $slab = $line;
            $slab =~ s/^[0-9]+\///;
            # On retire l'index de la racine :
            # - On le rajoute incrémenté de 1 dans le cas d'un chaînage slink
            #   Ex :
            #      Dans la liste de l'ancêtre, on avait 12/<Chemin ou nom de l'objet de la dalle>
            #      Dans la nouvelle liste, on aura 13/<Chemin ou nom de l'objet de la dalle>
            #   Ainsi on libère l'index 0 pour les dalles propre à la nouvelle pyramide
            # - On met zéro sinon, la dalle étant importée dans la nouvelle pyramide (pas de dépendance avec l'ancêtre)
            if ($updateMode eq 'slink') {
                printf $NEWLIST "%s/$slab\n", $rootIndex + 1;
            } elsif ($updateMode eq 'inject') {
                # Dans le cas injectif, on a laissé le fichier ou lien tel quel, on remet donc la ligne telle quelle
                print $NEWLIST "$line\n";
            } else {
                print $NEWLIST "0/$slab\n";
            }
            # Root is used : we incremente its counter
            $ancestorRootsUse{$rootIndex}++;
        }
        
    }
    
    close $OLDLIST;
    close $NEWLIST;

    # Now, we can write binding between ID and root, testing counter.
    # We write at the top of the list file, caches' roots, using Tie library
    my @NEWLISTHDR;

    if ($updateMode eq "inject") {
        # En mode injection, il ne faut pas écrire directement le fichier de la nouvelle pyramide, car c'est celui de l'ancêtre

        if (! tie @NEWLISTHDR, 'Tie::File', $newListPathTmp) {
            ERROR("Cannot write the header of the new pyramid list file : $newListPathTmp");
            return FALSE;
        }
    } else {
        # Sinon, on peut directement écrire dans le fichier liste final de la nouvelle pyramide

        if (! tie @NEWLISTHDR, 'Tie::File', $newListPath) {
            ERROR("Cannot write the header of the new pyramid list file : $newListPath");
            return FALSE;
        }
    }

    unshift @NEWLISTHDR,"#\n";
    
    if ($updateMode eq 'slink') {
        while ( my ($rootID,$root) = each(%ancestorRoots) ) {
            if ($ancestorRootsUse{$rootID} > 0) {
                # Used roots are written in the header, incremented
                unshift @NEWLISTHDR,(sprintf "%s=%s", $rootID + 1, $root);
            }
        }
    }
    elsif ($updateMode eq 'inject') {
        while ( my ($rootID,$root) = each(%ancestorRoots) ) {
            if ($rootID == 0) {
                # La racine de la nouvelle pyramide (= l'ancienne) sera ajoutée après, pour être en première ligne
                next;
            }
            if ($ancestorRootsUse{$rootID} > 0) {
                # Used roots are written in the header, like in the ancestor
                unshift @NEWLISTHDR,(sprintf "%s=%s", $rootID, $root);
            }
        }
    }
    
    unshift @NEWLISTHDR,"0=$newRoot\n";
    untie @NEWLISTHDR;

    if ($updateMode eq "inject") {
        # On peut maintenant mettre le nouveau fichier liste à la place de l'ancien
        DEBUG("Inject mode: $newListPathTmp -> $newListPath");
        `mv $newListPathTmp $newListPath`;
    }
    
    return TRUE;
}

=begin nd
Function: doIt

Steps in order, using parameters :
    - load ancestor pryamid if exists : <COMMON::PyramidVector::new>
    - load data sources : <COMMON::DataSourceLoader::new>
    - create the Pyramid object : <COMMON::PyramidVector::new>
    - update the Pyramid object with the TMS : <COMMON::PyramidVector::bindTileMatrixSet>
    - update data sources with the levels : <COMMON::DataSourceLoader::updateDataSources>
    - create the pyramid's levels : <COMMON::PyramidVector::addLevel>
    - create the Forest object : <COMMON::Forest::new>
    - write the pyramid's list : <writeListAndReferences>
    - write the pyramid's descriptor : <COMMON::PyramidVector::writeDescriptor>
    - compute trees (write scripts) : <COMMON::Forest::computeGraphs>
=cut
sub doIt {

    #######################
    # link to parameters
    my $params = $this{params};
    
    #######################
    # objects to implemented
    
    my $objAncestorPyramid = undef;
    my $objPyramid = undef;
    my $objDSL = undef;
    my $objForest = undef;

    #######################

    my $force = FALSE;

    #######################
    # if ancestor, read it

    if (exists $params->{pyramid}->{pyr_name_old} && defined $params->{pyramid}->{pyr_name_old}) {
    
        ALWAYS(">>> Load an ancestor pyramid ...");

        if (! exists $params->{pyramid}->{pyr_desc_path_old} || ! defined $params->{pyramid}->{pyr_desc_path_old}) {
            ERROR("If ancestor pyramid, we need the 'pyr_desc_path_old' parameter with 'pyr_name_old'");
            return FALSE;
        }

        if (! defined $params->{pyramid}->{update_mode} || $params->{pyramid}->{update_mode} eq "") {
            ERROR("If ancestor pyramid, we need the 'update_mode' parameter");
            return FALSE;
        }

        my $updateMode = $params->{pyramid}->{update_mode} ;
        if (! defined COMMON::Array::isInArray($updateMode, @UPDATESMODES) ) {
            ERROR("Update mode '$updateMode' is not allowed for FILE pyramids");
            return FALSE;
        }

        my $ancestorDescriptor = File::Spec->catdir($params->{pyramid}->{pyr_desc_path_old}, $params->{pyramid}->{pyr_name_old});
        $ancestorDescriptor .= ".pyr" if ($ancestorDescriptor !~ m/\.pyr/i);

        $objAncestorPyramid = COMMON::PyramidVector->new("DESCRIPTOR", $ancestorDescriptor );
        if (! defined $objAncestorPyramid) {
            ERROR("Cannot load ancestor pyramid !");
            return FALSE;
        }

        if (! $objAncestorPyramid->bindTileMatrixSet($params->{pyramid}->{tms_path})) {
            ERROR("Cannot bind TMS to ancestor pyramid !");
            return FALSE;
        }

        if ($objAncestorPyramid->getStorageType() ne "FILE") {
            ERROR("Ancestor pyramid have to be a FILE pyramid !");
            return FALSE;
        }

        # Dans le cas de l'injection, on veut que la nouvelle pyramide soit écrite sur l'ancienne
        # On va donc modifier le nom et les emplacements pour mettre les mêmes que ceux de l'ancêtre

        if ($updateMode eq "inject") {
            WARN("'inject' update mode is selected, ancestor is modified, without possible rollback.");
            $params->{pyramid}->{pyr_desc_path} = $objAncestorPyramid->getDescriptorDir();
            $params->{pyramid}->{pyr_data_path} = $objAncestorPyramid->getDataRoot();
            $params->{pyramid}->{pyr_name_new} = $objAncestorPyramid->getName();
            $force = TRUE;
        }
    }

    #######################
    # create a pyramid
    
    ALWAYS(">>> Load the new pyramid ...");
    
    $objPyramid = COMMON::PyramidVector->new("VALUES", $params->{pyramid}, $objAncestorPyramid );
    if (! defined $objPyramid) {
        ERROR("Cannot create output Pyramid !");
        return FALSE;
    }

    if ($objPyramid->getStorageType() ne "FILE") {
        ERROR("New pyramid have to be a FILE pyramid !");
        return FALSE;
    }

    if (! $objPyramid->bindTileMatrixSet($params->{pyramid}->{tms_path})) {
        ERROR("Cannot bind TMS to output Pyramid !");
        return FALSE;
    }


    if (! $force && -f $objPyramid->getListFile()) {
        ERROR(sprintf "New pyramid list ('%s') exist, can not overwrite it ! ", $objPyramid->getListFile());
        return FALSE;
    }
    
    #######################
    # load data source
    
    ALWAYS(">>> Load Data Source ...");

    $objDSL = COMMON::DataSourceLoader->new($params->{datasource});
    if (! defined $objDSL) {
        ERROR("Cannot load data sources !");
        return FALSE;
    }

    if ($objDSL->getType() ne "VECTOR") {
        ERROR("4ALAMO expect VECTOR data sources !");
        return FALSE;
    }
    
    DEBUG($objDSL->exportForDebug());

    my $objTMS = $objPyramid->getTileMatrixSet();
    # update datasources top/bottom levels !
    my ($bottomOrder,$topOrder) = $objDSL->updateDataSources($objTMS, $params->{pyramid}->{pyr_level_top});
    if ($bottomOrder == -1) {
        ERROR("Cannot determine top and bottom levels, from data sources.");
        return FALSE;
    }
    
    #######################
    # add levels to pyramid
    
    ALWAYS(">>> Determine levels ...");
    
    # Create all level between the bottom and the top
    for (my $order = $bottomOrder; $order <= $topOrder; $order++) {

        my $ID = $objTMS->getIDfromOrder($order);
        if (! defined $ID) {
            ERROR(sprintf "Cannot identify ID for the order %s !", $order);
            return FALSE;
        }

        if (! $objPyramid->addLevel($ID, $objAncestorPyramid, $objDSL->getDataSource($order)->getDatabaseSource()) ) {
            ERROR("Cannot add level $ID");
            return FALSE;            
        }
    }
    
    # we cannot write the pyramid descriptor and cache now. We need data's limits, calculated by graphs.
  
    #######################
    # create forest : load graphs
    
    ALWAYS(">>> Load Forest ...");
  
    $objForest = COMMON::Forest->new(
        $objPyramid, 
        $objDSL, 
        $params->{process}
    );
  
    if (! defined $objForest) {
        ERROR("Can not load the forest !");
        return FALSE;
    }

    #######################
    # write the pyramid list
    
    ALWAYS(">>> Write the pyramid's list ...");

    if ( ! writeListAndReferences($objForest, $objPyramid, $objAncestorPyramid) ) {
        ERROR("Can not write Pyramid list and reference ancestor if exist !");
        return FALSE;
    }
    
    #######################
    # write the pyramid descriptor

    ALWAYS(">>> Write the pyramid's descriptor ...");

    if ( ! $objPyramid->writeDescriptor($force) ) {
        ERROR("Can not write Pyramid file !");
        return FALSE;
    }
  
    #######################
    # compute graphs
    
    ALWAYS(">>> Compute forest ...");
    
    if (! $objForest->computeGraphs()) {
        ERROR("Can not compute forest !");
        return FALSE;
    }
    
    DEBUG(sprintf "FOREST (debug export) = %s", $objForest->exportForDebug());

    #######################
    # Écrire le script principal
    ALWAYS(">>> Write main script");
    my $scriptPath = File::Spec->catfile($params->{process}->{path_shell}, "main.sh");
    open(MAIN, ">$scriptPath") or do {
        ERROR("Cannot open '$scriptPath' to write in it");
        return FALSE;
    };

    print MAIN FOURALAMO::Shell::getMainScript();

    close(MAIN);

    INFO("To run all scripts on the same machine, run :");
    INFO("\t bash $scriptPath");
    
    return TRUE;
}

################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__
